#!/usr/bin/env rc

pfont=/mnt/font/LucidaGrande/14a/font
tfont=/mnt/font/Monaco/13a/font

###########################
#         Options

#  0 = false, 1 = true
DYNAMIC_FONT=1
MENU='|a-  |a+  |com'

fn filetype{
	switch($filename){
	case *.java *.js *.ts
		comstart='// '
		tab='  '
	case *.go
		comstart='// '
		tab='	'
		savehooks=('gofmt $NAME')
	case *.tf *.yaml *.yml
		comstart='# '
		tab='  '
	case *.c *.h
		comstart='/\* '
		comend=' \*/'
		tab='	'
	case *
		comstart='# '
		tab='	'
	}
}

###########################

fn usage{
  echo `{basename $0}^' [indent|unindent|comment|listen]'
}

fn lisusage{
	echo
	echo 'export $font and $lfont in your environment'
	echo
	echo '  $font=fixed width'
	echo '  $lfont=variable width'
	echo
	echo 'usage: '^`{basename $0}^' <log file>'
	echo
}

fn die{
	>[1=2] echo $0: $*
	exit $"*
}

fn chomp{
	# trim trailing newline if the input did not have one
	hasnl=`{tail -c 1 $f}
	if(! ~ $#hasnl 0)
		awk '
		{ prev_line = line; line = $0; }
		NR > 1 { print prev_line; }
		END { ORS = ""; print line; }
		'
	if not
		cat
}

fn pipe{
	action=$1
 	if (~ $#% 0)
		die 'this only works in acme'

	f=/tmp/buf.$pid
	cat /dev/stdin >$f

	cat $f | {
		switch($action){
		case COMMENT
			comlines=`{{ cat $f | grep $comstart | wc -l }};
			noncomlines=`{{ cat $f | grep -v $comstart | wc -l}};
			if(test $comlines -gt $noncomlines){
				# uncomment
				if(! ~ $#comend 0){
					sed 's|'^$comstart^'||';
					sed 's|'^$comend^'||';
				}
				if not
					sed 's|'^$comstart^'||';
			}
			if not{
				# comment
				if(! ~ $#comend 0){
					sed 's|^[ 	]+|&'^$comstart^'|';
					sed 's|$|'^$comend^'|';
				}
				# TODO: fix ending comment within delimeters { }
				if not
					sed 's|^[ 	]+|&'^$comstart^'|';
			}
		case INDENT
			sed 's/^.+/'^$tab^'&/';
		case UNINDENT
			sed 's/^'^$tab^'//';
		}
	} | chomp
	rm $f
}

fn clearstate{
	filename=''
	savehooks=()
	comstart=''
	comend=''
	tab=''
	cmd=''
	state=clean
}

fn execintag{
	gettag
	len=`{echo $1 | wc -c}
	selbegin=`{echo $tag | wc -c}
	selend=`{echo $selbegin+$len | bc -l}
	echo $1 | 9p write acme/$winid/tag
	echo 'Mx'^$selbegin^' '^$selend | 9p write acme/$winid/event
	gettag
}

fn cleartag{
	echo -n cleartag | 9p write acme/$winid/ctl
	gettag
}

fn gettag{
	tag=`{9p read acme/$winid/tag}
}

fn listen{

	logfile=$1
	if(~ $#logfile 0)
		logfile=/dev/stdout
	if not
		touch $logfile

	if(~ $#pfont 0 || ~ $#tfont 0){
		lisusage
		die 'logfile, font, or lfont is not available in the environment'
	}

	echo log file: $logfile
	echo primary font: $pfont >> $logfile
	echo terminal font: $tfont >> $logfile
	echo dynamic font enabled: $DYNAMIC_FONT >> $logfile

	9p read acme/log | while(event=`{read}){

		winid=`{echo $event | awk '{print $1}'}
		action=`{echo $event | awk '{print $2}'}
		file=`{echo $event | awk '{print $3}'}

		switch($action){
		case put
			filename=$file
			filetype
			if(! ~ $#savehooks 0 && ! ~ $state dirty){
				filename=$file
				filetype
				for(hook in $savehooks){
					cmd=`{echo $hook | sed 's|\$NAME|'^$filename^'|g'}
					echo -n , | 9p write acme/$winid/addr
					echo 'dot=addr' | 9p rdwr acme/$winid/ctl
					$cmd | 9p write acme/$winid/data
				}
				echo -n 'put' | 9p write acme/$winid/ctl
				state=dirty
			}
			if not
				clearstate

		case new
			tag=`{9p read acme/$winid/tag}
			originaltag=`{echo $tag | sed 's/.*\|//'}
			if(~ $DYNAMIC_FONT 1){
				switch($tag){
				case */-*
					# terminal
					execintag 'Font '^$tfont
					cleartag
				case *
					# normal window
					execintag 'Font '^$pfont
					cleartag
				}
			}
			if(! ~ $#originaltag 0)
				echo ' '^$originaltag | 9p write acme/$winid/tag
			if(! ~ $tag *+Errors* && ! ~ $tag */-*)
				echo -n $MENU | 9p write acme/$winid/tag

		}
	}
}

switch ($#*){
case 0
	die `{usage}
case *
	if(~ $1 listen)
		listen $2
	if not{
		filename=$%
		filetype
		switch ($1){
		case indent
			pipe INDENT
		case unindent
			pipe UNINDENT
		case comment
			pipe COMMENT
		case listen
			listen $2
		case *
			die `{usage}
		}
	}
}
