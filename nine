#!/bin/rc

# always use 9 tools
if(! ~ $#PLAN9 0)
	path=($PLAN9/bin $path)

###########################
#         Options

# Sets font to proportional width font for text buffers and
# a fixed width font for win/terminal buffers
DYNAMIC_FONT=1

# Edwood has some features Acme does not. Set to 1 if you
# are using Edwood.
HAS_EDWOOD=1

# These menu items will be set in the tag on every new window
MENU='|a-  |a+  |com |fmt |f+ |f-'
MAXTAB=8
fn filetype{
	switch($filename){
	case *.java *.js *.ts
		comstart='// '
		tab='  '
		tabwidth=2
		tabexpand=1
	case *.go
		comstart='// '
		tab='	'
		savehooks=('gofmt $NAME')
	case *.tf *.yaml *.yml
		comstart='# '
		tab='  '
		tabwidth=2
		tabexpand=1
	case *.c *.h
		comstart='/\* '
		comend=' \*/'
		tab='	'
	case *
		comstart='# '
		tab='	'
	}
}

###########################

nl='
'
ifs=$nl

fn usage{
	echo `{basename $0}^' [indent|unindent|comment|listen|font]'
}

fn die{
	>[1=2] echo $0: $*
	exit $"*
}

####################################################
#                                       line handling
####################################################

fn chomp{
	# trim trailing newline
	awk '
	{ prev_line = line; line = $0; }
	NR > 1 { print prev_line; }
	END { ORS = ""; print line; }
	'
}

fn pipe{
	action=$1
 	if (~ $#% 0 && ~ $#samfile 0)
		die this only works in acme or sam
	lines=''
	while(l=`{read}){
		if(~ $#l 0)
			l=$nl
		if not
			l=$l^$nl
		if(~ $#lines 0)
			lines=$l
		if not
			lines=$lines^$l
	}
	echo $lines | {
		switch($action){
		case COMMENT
			tlines=`{{ echo $lines | wc -l }}
			comlines=`{{ echo $lines | grep -c $comstart }};
			threshold=`{echo ('scale=0;' $tlines '/2') | bc -l}

			if(test $comlines -gt $threshold){
				# uncomment
				if(! ~ $#comend 0){
					sed 's|'^$comstart^'||';
					sed 's|'^$comend^'||';
				}
				if not
					sed 's|'^$comstart^'||';
			}
			if not{
				# comment
				if(! ~ $#comend 0){
					sed 's|^[ 	]+|&'^$comstart^'|';
					sed 's|$|'^$comend^'|';
				}
				if not
					sed 's,([ 	]+)|(^+),&'^$comstart^',';
			}
		case INDENT
			sed 's/^/'^$tab^'/';
		case UNINDENT
			sed 's/^'^$tab^'?//';
		}
	} | awk 'NR>1{print buf}{buf = $0}'
}

####################################################
#                                        acme listener
####################################################

fn execintag{
	input=$*
	gettag
	len=`{echo -n $input |  wc -c | awk '{print $1}'}
	selbegin=`{echo -n $tag | wc -c | awk '{print $1}'}
	selend=`{echo $selbegin+$len | bc -l}
	echo -n $input | writetag
	# ecmd=`{echo -n Mx$selbegin $selend 0 $len $input}
	ecmd=`{echo -n Mx$selbegin $selend}
	echo $ecmd | 9p write acme/$winid/event
}

fn writetag{
	9p write acme/$winid/tag
}

fn cleartag{
	echo -n cleartag | 9p write acme/$winid/ctl
	gettag
}

fn gettag{
	tag=`{9p read acme/$winid/tag}
}

fn clearstate{
	# file
	file=()
	filename=()

	# filetype
	savehooks=()
	comstart=()
	comend=()
	tab=()
	tabexpand=()
	tabwidth=()

	# event
	cmd=()
	tag=()
	originaltag=()
	winid=()
	action=()

	# mark state
	state=clean
}

fn listen{
	logfile=$1
	if(~ $#logfile 0)
		logfile=/dev/stdout
	if not
		touch $logfile

	echo log file: $logfile
	echo dynamic font enabled: $DYNAMIC_FONT >> $logfile

	9p read acme/log | while(event=`{read}){

		winid=`{echo $event | awk '{print $1}'}
		action=`{echo $event | awk '{print $2}'}
		file=`{echo $event | awk '{print $3}'}

		switch($action){
		case put
			filename=$file
			filetype
			if(! ~ $#savehooks 0 && ! ~ $state dirty){
				filename=$file
				filetype
				for(hook in $savehooks){
					cmd=`{echo $hook | sed 's|\$NAME|'^$filename^'|g'}
					echo -n , | 9p write acme/$winid/addr
					echo 'dot=addr' | 9p rdwr acme/$winid/ctl
					$cmd | 9p write acme/$winid/data
				}
				echo -n 'put' | 9p write acme/$winid/ctl
				state=dirty
			}
			if not
				clearstate

		case new
			gettag
			originaltag=`{echo $tag | sed 's/.*\|//'}

			if(~ $DYNAMIC_FONT 1){
				switch($tag){
				case */-*
					execintag Font
				}
			}

			# if(~ $HAS_EDWOOD 1){
				# filename=$file
				# filetype
				# echo $#tabexpand $#tabwidth
				# if(! ~ $#tabexpand 0 && ! ~ $#tabwidth 0){
					# execintag 'Tab '^$tabwidth
					# execintag 'Tabexpand'
				# }
			# }

			cleartag

			if(! ~ $#originaltag 0)
				echo $originaltag | writetag

			if(! ~ $tag *+Errors* && ! ~ $tag */-*)
				echo -n $MENU | writetag

			clearstate
		}
	}
}

####################################################
#                                         entrypoint
####################################################

fn setfiletype{
	filename=$%
	if(~ $#filename 0)
		filename=$samfile
	if(~ $#filename 0)
		die 'can only be used with sam or acme'
	filetype
}

fn getwinfont{
	9p read acme/$winid/ctl | awk '{print $7}'
}

fn getnums {
	sed 's/[^0-9]*//g'
}

switch ($#*){
case 0
	die `{usage}
case *
	if(~ $1 listen)
		listen $2
	if not{
		switch ($1){
		case indent
			setfiletype
			pipe INDENT
		case unindent
			setfiletype
			pipe UNINDENT
		case comment
			setfiletype
			pipe COMMENT
		case listen
			setfiletype
			listen $2
		case filetype
			setfiletype
			if(! ~ $#tabwidth 0)
				echo z $tabwidth
			if not{
				echo z $MAXTAB
			}
			if(! ~ $#tabexpand 0 && ~ $tabexpand 1)
				echo Z
		case font
			shift
			if(~ $#1 0)
				die 'must specify "increase" or "decrease"'
			if(~ $#% 0 || ~ $#winid 0)
				die 'only can be used in acme'
			switch($1){
			case increase
				wfont=`{getwinfont}
				cfs=`{echo $wfont | getnums}
				nfs=`{echo ('scale=0;' $cfs ' + 1') | bc -l}
				nf=`{echo $wfont | sed 's/'^$cfs^'/'^$nfs^'/g'}
				echo font $nf | 9p write acme/$winid/ctl
			case decrease
				wfont=`{getwinfont}
				cfs=`{echo $wfont | getnums}
				nfs=`{echo ('scale=0;' $cfs '- 1') | bc -l}
				nf=`{echo $wfont | sed 's/'^$cfs^'/'^$nfs^'/g'}
				echo font $nf | 9p write acme/$winid/ctl
			}
		case kill
			reader=`{ps -a | grep 'read acme' | head -n 1 | awk '{print $2}'}
			nine=`{ps -a | grep 'read nine' | head -n 1 | awk '{print $2}'}
			slay $reader | rc
			slay $nine | rc
		case *
			die `{usage}
		}
	}
}
