#!/usr/bin/env rc

fn filetype{
	switch($%){
	case *.java *.js *.ts
		comstart='// '
		usetabs=0
		tabwidth=2
	case *.go
		comstart='// '
		usetabs=1
	case *.tf *.yaml *.yml
		comstart='# '
		usetabs=0
		tabwidth=2
	case *.c *.h
		comstart='/\* '
		comend=' \*/'
		usetabs=1	
	case *
		comstart='# '
		usetabs=1
	}
}

fn usage{
  echo `{basename $0}^' [indent|unindent|comment]'
}

fn die{
	>[1=2] echo $0: $*
	exit $"*
}

fn newtab{
	if(test $usetabs -eq 0){
		tab=(' ')
		for(i in `{seq 2 $tabwidth}){
			tab=$tab^' '
		}
		echo -n $tab	
	}
	if not{
		echo -n '	'
	}
}

fn pipe{
	action=$1
	if (~ $#% 0)
		die 'this only works in acme'

	# capture stdin in $input, using a newline as the separater
	nl='
'
	ifs=$nl
	
	# get stdin line by line
	in=()
	while(l=`{read}){
		in=($in $l $nl)
	}
	
	startnl=0
	target=`{ echo $#in-1 | bc }
	for(i in `{ seq 1 $#in }) {

		l=$in($i)
		str=$"l

		switch($str){
		case $nl
			switch($i){
			case 1
				startnl=1
				echo
			}
		case *
			# echo -n executing
			switch($action){
			case COMMENT
				comlines=`{echo $in | grep $comstart | wc -l}
				noncomlines=`{echo $in | grep -v $comstart | wc -l}
				# uncomment
				if(~ $comlines $noncomlines || test $comlines -gt $noncomlines){
					if(! ~ $#comend 0)
						out=`{echo $str | sed 's|'^$comstart^'||' \
							| sed 's|'^$comend^'||'}
					if not
						out=`{echo $str | sed 's|'^$comstart^'||'}
				}
				# comment
				if not{
					if(! ~ $#comend 0)
						out=`{echo $str | sed 's|[^ 	]|'^$comstart^'&|' \
							| sed 's|$|'^$comend^'|'}
					if not
						out=`{echo $str | sed 's|[^ \t]|&'^$comstart^'|'}
				}
			case INDENT
				out=`{echo $str | sed 's/^/'^`{newtab}^'/'}
			case UNINDENT
				out=`{echo $str | sed 's/^'^`{newtab}^'//'}
			}

			# handle trailing newlines properly
			if(~ $i $target && ! ~ $#in 2 && ! ~ $startnl 1){
				echo -n $out
			}
			if not{
				echo $out
			}
				
		}
	}

}

switch ($#*){
case 0
	die `{usage}
case *
	switch ($1){
	case indent
		filetype; pipe INDENT
	case unindent
		filetype; pipe UNINDENT
	case comment
		filetype; pipe COMMENT
	case *
		die `{usage}
	}
}
