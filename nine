#!/usr/bin/env rc

pfont=$lfont
tfont=$font

###########################
#         Options
#  0 = false
#  1 = true
#

DYNAMIC_FONT=0

fn filetype{
	switch($%){
	case *.java *.js *.ts
		comstart='// '
		usetabs=0
		tabwidth=2
	case *.go
		comstart='// '
		usetabs=1
	case *.tf *.yaml *.yml
		comstart='# '
		usetabs=0
		tabwidth=2
	case *.c *.h
		comstart='/\* '
		comend=' \*/'
		usetabs=1
	case *
		comstart='# '
		usetabs=1
	}
}

###########################

fn usage{
  echo `{basename $0}^' [indent|unindent|comment|listen]'
}

fn lisusage{
	echo
	echo 'export $font and $lfont in your environment'
	echo
	echo '  $font=fixed width'
	echo '  $lfont=variable width'
	echo
	echo 'usage: '^`{basename $0}^' <log file>'
	echo
}

fn die{
	>[1=2] echo $0: $*
	exit $"*
}

fn writetag{
	len=`{echo $1 | wc -c}
	selbegin=`{echo $tag | wc -c}
	selend=`{echo $selbegin+$len | bc -l}
	echo $1 | 9p write acme/$id/tag
	echo 'Ex'^$selbegin^' '^$selend | 9p write acme/$id/event
}

fn cleartag{
	echo 'cleartag' | 9p write acme/$id/ctl
}

fn writedefault{
	writetag ' Look  Send'
}

fn newtab{
	if(~ $#usetabs 0){
		tab=(' ')
		for(i in `{seq 2 $tabwidth}){
			tab=$tab^' '
		}
	}
	if not{
		tab='	'
	}
}

fn chomp{
	# trim trailing newline if the input did not have one
	hasnl=`{tail -c 1 $f}
	if(! ~ $#hasnl 0)
		awk '
		{ prev_line = line; line = $0; }
		NR > 1 { print prev_line; }
		END { ORS = ""; print line; }
		'
	if not
		cat
}

fn pipe{
	action=$1
 	if (~ $#% 0)
		die 'this only works in acme'

	f=/tmp/buf.$pid
	cat /dev/stdin >$f

	cat $f | {
		switch($action){
		case COMMENT
			comlines=`{{ cat $f | grep $comstart | wc -l }};
			noncomlines=`{{ cat $f | grep -v $comstart | wc -l}};
			if(test $comlines -gt $noncomlines){
				# uncomment
				if(! ~ $#comend 0){
					sed 's|'^$comstart^'||';
					sed 's|'^$comend^'||';
				}
				if not
					sed 's|'^$comstart^'||';
			}
			if not{
				# comment
				if(! ~ $#comend 0){
					sed 's|^[ 	]*|&'^$comstart^'|';
					sed 's|$|'^$comend^'|';
				}
				if not
					sed 's|^[ 	]*|&'^$comstart^'|';
			}
		case INDENT
			newtab
			sed 's/^/'^$tab^'/';
		case UNINDENT
			newtab
			sed 's/^'^$tab^'//';
		}
	} | chomp
	rm $f
}

fn listen{
	logfile=$1
	if(~ $#logfile 0 || ~ $#pfont 0 || $#tfont 0){
		lisusage
		die 'logfile, font, or lfont is not available in the environment'
	}

	touch $logfile
	echo 'listening...' >> $logfile
	echo primary font: $pfont >> $logfile
	echo terminal font: $tfont >> $logfile
	echo dynamic font enabled? $DYNAMIC_FONT

	9p read acme/log | while(event=`{read}){
		id=`{echo $event | awk '{print $1}'}
		action=`{echo $event | awk '{print $2}'}
		file=`{echo $event | awk '{print $3}'}
		switch($action){
		case new
			if(~ $DYNAMIC_FONT 1){
				tag=`{9p read acme/$id/tag}
				# set fixed with font for terminal
				if(! ~ $#tag 0 && ~ $tag */-*){
					writetag 'Font '^$tfont
					cleartag
					writedefault
				}
				# set variable width font elsewhere
				if not{
					writetag 'Font '^$pfont
					cleartag
					writedefault
				}
			}
		}
	}
}

switch ($#*){
case 0
	die `{usage}
case *
	filetype
	switch ($1){
	case indent
		pipe INDENT
	case unindent
		pipe UNINDENT
	case comment
		pipe COMMENT
	case listen
		listen $2
	case *
		die `{usage}
	}
}
